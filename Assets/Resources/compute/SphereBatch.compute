// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define MAX_SPHERE_COUNT_PER_BATCH 4096

uniform	float _Scale;
uniform int _EnableLod;
uniform	int _NumLevels;
uniform	int _NumInstances;
uniform float4 _CameraForward;
uniform float4 _CameraPosition;
uniform float4 _LodLevelsInfos[4];

uniform	StructuredBuffer<int> _ProteinVisibilityFlag;

uniform	StructuredBuffer<int> _IngredientAtomCount;
uniform	StructuredBuffer<int> _IngredientAtomStart;
uniform	StructuredBuffer<float4> _IngredientClusterCount;
uniform	StructuredBuffer<float4> _IngredientClusterStart;

uniform	StructuredBuffer<float4> _ProteinInstanceInfo;
uniform	StructuredBuffer<float4> _ProteinInstancePositions;	
uniform StructuredBuffer<int4> _ProteinInstanceCullFlags;	

uniform AppendStructuredBuffer<int4> _ProteinSphereBatchInfos;

[numthreads(32,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= (uint)_NumInstances) return;
	
	float4 infos = _ProteinInstanceInfo[id.x];	
	int4 cullFlags = _ProteinInstanceCullFlags[id.x];

	// if instance is culled return
	if(cullFlags.x == 1 || cullFlags.y == 1 || cullFlags.z == 1 || _ProteinVisibilityFlag[infos.x] == 0) return;
	//if(cullFlags.x == 1 || cullFlags.y == 1) return;
	
	float3 position = _ProteinInstancePositions[id.x].xyz * _Scale;	
	float cameraDistance = dot(position - _CameraPosition.xyz, _CameraForward.xyz);

	int lodLevel = 0;				
	for(int i = 0; i < _NumLevels; i++) 
	{ 
		lodLevel = (cameraDistance < _LodLevelsInfos[i][0]) ? lodLevel : i+1;
	}	

	lodLevel = (_EnableLod == 0) ? 0 : lodLevel;

	int clusterLevel = max(lodLevel - 1, 0);
	
	int sphereIndex = (lodLevel == 0) ? _IngredientAtomStart[infos.x] : _IngredientClusterStart[infos.x][clusterLevel];
	int sphereCount = (lodLevel == 0) ? _IngredientAtomCount[infos.x] : _IngredientClusterCount[infos.x][clusterLevel];
	
	int numBatches = ceil((float)sphereCount / (float)MAX_SPHERE_COUNT_PER_BATCH);	
	int sphereCountPerBatch = ceil(float(sphereCount) / float(numBatches));

	int batchIndex = 0;
	int batchCount = sphereCountPerBatch;		

	for(int j = 0; j < numBatches; j++)
	{
		batchCount = min(batchIndex + sphereCountPerBatch, sphereCount) - batchIndex;			
		_ProteinSphereBatchInfos.Append(int4(id.x, lodLevel, batchCount, sphereIndex + batchIndex));
		batchIndex += batchCount;
	}		
}
