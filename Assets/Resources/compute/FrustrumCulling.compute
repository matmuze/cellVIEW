uniform	int _Ping;
uniform	float _Scale;
uniform float4 _FrustrumPlanes[6]; 

uniform	int _NumInstances;
uniform	StructuredBuffer<float4> _InstancePositions;
uniform	RWStructuredBuffer<float4> _InstanceCullFlags;

bool SpherePlaneTest(float4 plane, float3 center, float radius)
{
	return dot(plane.xyz, center - plane.xyz * -plane.w) + radius > 0;
}

bool SphereFrustrumTest( float3 center, float radius)
{
	bool inFrustrum = true;

	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[0], center, radius);
	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[1], center, radius);
	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[2], center, radius);
	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[3], center, radius);
	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[4], center, radius);
	inFrustrum = inFrustrum & SpherePlaneTest(_FrustrumPlanes[5], center, radius);	

	return !inFrustrum;
}

#pragma kernel FrustrumCulling

[numthreads(8,1,1)]
void FrustrumCulling (uint3 id : SV_DispatchThreadID)
{	
	if(id.x >= (uint)_NumInstances) return;
	
	float4 data = _InstancePositions[id.x];
	float radius = data.w * _Scale;
	float3 center = data.xyz * _Scale;

	bool cullInstance = SphereFrustrumTest(center, radius);
	_InstanceCullFlags[id.x].y = cullInstance ? 1 : 0;	
}