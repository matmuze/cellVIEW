uniform	float _Scale;
uniform	int _NumProteinInstances;
uniform	int _NumLipidInstances;
uniform float4 _FrustrumPlanes[6]; 

#pragma kernel CSProteins

uniform	StructuredBuffer<int> _InstanceTypes;
uniform	StructuredBuffer<int> _InstanceStates;
uniform	StructuredBuffer<float4> _InstancePositions;
uniform	StructuredBuffer<float> _IngredientBoundingSpheres;
uniform	RWStructuredBuffer<int> _InstanceCullFlags;

bool spherePlaneTest( float4 plane, float3 center, float offset)
{
	return dot(plane.xyz, center - plane.xyz * -plane.w) + offset > 0;
}

[numthreads(8,1,1)]
void CSProteins (uint3 id : SV_DispatchThreadID)
{	
	if(id.x >= (uint)_NumProteinInstances) return;
	
	float3 center = _InstancePositions[id.x].xyz * _Scale;
	float radius = _IngredientBoundingSpheres[_InstanceTypes[id.x]] * _Scale;
	
	bool inFrustrum = true;

	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[0], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[1], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[2], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[3], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[4], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[5], center, radius);	
	
	_InstanceCullFlags[id.x] = (inFrustrum && _InstanceStates[id.x] == 0) ? 0 : 1;
}

#pragma kernel CSLipids

uniform StructuredBuffer<float4> _LipidInstancePositions;	
uniform RWStructuredBuffer<float4> _LipidSphereBatchInfos;	

[numthreads(8,1,1)]
void CSLipids (uint3 id : SV_DispatchThreadID)
{	
	if(id.x >= (uint)_NumLipidInstances) return;
	
	float4 sphereBatchInfo = _LipidSphereBatchInfos[id.x];
	float3 center = _LipidInstancePositions[id.x].xyz * _Scale;
	float radius = sphereBatchInfo.z * _Scale;
	
	bool inFrustrum = true;

	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[0], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[1], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[2], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[3], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[4], center, radius);
	inFrustrum = inFrustrum & spherePlaneTest(_FrustrumPlanes[5], center, radius);	
	
	int visibilityMask = sphereBatchInfo.w;	

	// We use the second bit of the visibility mask for cross section visibility
	// the first bit is reserved for frustrum visibility
										
	// Set visibility								// Set bit						// Clear bit
	_LipidSphereBatchInfos[id.x].w = inFrustrum ? visibilityMask & ~(1 << 0) : visibilityMask | (1 << 0);
}