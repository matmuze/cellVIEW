// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uniform float _Time;
uniform	StructuredBuffer<float4> _InstancePositions;
uniform	StructuredBuffer<float4> _InstanceRotations;

uniform RWStructuredBuffer<float4> _InstanceDisplayPositions;	
uniform RWStructuredBuffer<float4> _InstanceDisplayRotations;	

float hash( float n )
{
	return frac(sin(n)*43758.5453);
}

float noise_3D( float3 x )
{
	// The noise function returns a value in the range -1.0f -> 1.0f

	float3 p = floor(x);
	float3 f = frac(x);

	f       = f*f*(3.0-2.0*f);
	float n = p.x + p.y*57.0 + 113.0*p.z;

	return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float4 p = _InstancePositions[id.x];
	float4 r = _InstanceRotations[id.x];

	float speedFactor = 5.5;
	float translationScaleFactor = 10.0;
	float rotationScaleFactor = 0.25;

	float randx = frac(sin(dot(float2(id.x, p.x) ,float2(12.9898,78.233))) * 43758.5453);
	float randy = frac(sin(dot(float2(id.x, p.y) ,float2(12.9898,78.233))) * 43758.5453);
	float randz = frac(sin(dot(float2(id.x, p.z) ,float2(12.9898,78.233))) * 43758.5453);

	float3 pn;

	pn.x = noise_3D( randx + 100 + p.xyz + _Time * speedFactor);
	pn.y = noise_3D( randy + 200 + p.yzx + _Time * speedFactor);
	pn.z = noise_3D( randz + 300 + p.zxy + _Time * speedFactor);				
	pn -= 0.5;
	
	_InstanceDisplayPositions[id.x] = float4(p.xyz + pn * translationScaleFactor, 0);
	_InstanceDisplayRotations[id.x] = r;
}
	//int instanceId = _SubInstancesInformations[id.x].x 
	//p += _InstancesPositions[instanceId];

 //   float3 position = _InstancesPositions[id.x].xyz;
	//position += _SubInstancesPositions[id.x].xyz;

	//_SubInstancesOffsets[]

	//// Simulate BM
	//	if(_EnableBrownianMotion == 1)
	//	{
	//		float speedFactor = 1.5;
	//		float translationScaleFactor = 1.0;
	//		float rotationScaleFactor = 0.25;

	//		float randx = frac(sin(dot(float2(output.id, input[0].pos.x) ,float2(12.9898,78.233))) * 43758.5453);
	//		float randy = frac(sin(dot(float2(output.id, input[0].pos.y) ,float2(12.9898,78.233))) * 43758.5453);
	//		float randz = frac(sin(dot(float2(output.id, input[0].pos.z) ,float2(12.9898,78.233))) * 43758.5453);

	//		float3 pn;

	//		pn.x = noise_3D( randx + 100 + input[0].pos.xyz + _Time.xyz * speedFactor);
	//		pn.y = noise_3D( randy + 200 + input[0].pos.yzx + _Time.yzx * speedFactor);
	//		pn.z = noise_3D( randz + 300 + input[0].pos.zxy + _Time.zxy * speedFactor);				
	//		pn -= 0.5;

	//		output.pos = input[0].pos + pn * translationScaleFactor;		
			
	//		float4 rn;

	//		rn.x = noise_3D( randx + 400 + input[0].pos.xzy + _Time.xyz * speedFactor);
	//		rn.y = noise_3D( randy + 500 + input[0].pos.yxz + _Time.yzx * speedFactor);
	//		rn.z = noise_3D( randz + 600 + input[0].pos.zyx + _Time.zxy * speedFactor);			
	//		rn.w = noise_3D( randz + 700 + input[0].pos.xyx + _Time.xyz * speedFactor);				
	//		rn -= 0.5;
			
	//		output.rot = normalize(input[0].rot + rn * rotationScaleFactor);	
	//	}

